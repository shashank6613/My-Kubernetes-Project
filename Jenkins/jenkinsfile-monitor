pipeline {
    agent any
    environment {
        CLUSTER_NAME = 'app-clus'
        REGION = 'us-west-2'
        GRAFANA_PASSWORD_CRED_ID = 'grafana-admin-pass'
    }

    stages {
        stage('Update kubeconfig') {
            steps {
                script {
                    echo "üîÑ Updating kubeconfig for EKS cluster '${CLUSTER_NAME}'..."
                    withAWS(credentials: 'aws-creds', region: REGION) {
                        sh '''
                            aws eks update-kubeconfig \
                            --name ${CLUSTER_NAME} \
                            --region ${REGION} \
                            --alias ${CLUSTER_NAME}
                        '''
                        echo '‚úÖ kubeconfig updated successfully.'
                    }
                    echo 'üîç Verifying connectivity...'
                    sh "kubectl get nodes --context=${CLUSTER_NAME}"
                }
            }
        }

        stage('Install Prometheus Monitoring Stack') {
            steps {
                script {
                    echo 'üöÄ Installing Prometheus stack via Helm...'
                    sh '''
                        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts || true
                        helm repo update
                        if helm ls -n monitoring | grep -q prometheus; then
                            echo "üîÑ Upgrading existing Prometheus release..."
                            helm upgrade prometheus prometheus-community/kube-prometheus-stack \
                                --namespace monitoring \
                                -f Prometheus/prometheus-values.yaml \
                                --set ingress.enabled=true
                        else
                            echo "üöÄ Installing new Prometheus release..."
                            helm install prometheus prometheus-community/kube-prometheus-stack \
                                --namespace monitoring --create-namespace \
                                -f Prometheus/prometheus-values.yaml \
                                --set ingress.enabled=true
                        fi
                    '''
                    echo '‚è≥ Waiting for Grafana pod...'
                    timeout(time: 8, unit: 'MINUTES') {
                        waitUntil {
                            sh(script: "kubectl get pods -n monitoring -l app.kubernetes.io/name=grafana --field-selector=status.phase=Running | grep grafana", returnStatus: true) == 0
                        }
                    }
                    echo '‚úÖ Grafana running.'
                }
            }
        }

        stage('Configure Grafana Admin Password') {
            steps {
                withCredentials([string(credentialsId: GRAFANA_PASSWORD_CRED_ID, variable: 'GRAFANA_PASSWORD')]) {
                    echo 'üîê Creating Grafana admin-password secret...'
                    sh '''
                    kubectl create secret generic grafana-admin-password \
                    --from-literal=admin-password="${GRAFANA_PASSWORD}" \
                    -n monitoring --dry-run=client -o yaml | kubectl apply -f -
                    '''
                }
            }
        }

        stage('Install Ingress Controller') {
            steps {
                script {
                    echo 'üöÄ Installing NGINX Ingress Controller...'
                    sh '''
                        helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
                        helm repo update
                        helm install ingress-nginx ingress-nginx/ingress-nginx \
                          --namespace ingress-nginx --create-namespace \
                          --set controller.service.type=LoadBalancer \
                          --set controller.publishService.enabled=true
                    '''
                    echo '‚è≥ Waiting for LoadBalancer IP...'
                    timeout(time: 5, unit: 'MINUTES') {
                        waitUntil {
                            def lb = sh(script: "kubectl get svc ingress-nginx-controller -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].hostname}{.status.loadBalancer.ingress[0].ip}'", returnStdout: true).trim()
                            echo "LoadBalancer address: ${lb}"
                            return lb != ''
                        }
                    }
                    echo '‚úÖ Ingress Controller ready.'
                }
            }
        }

        stage('Update External IP in Ingress Files') {
            steps {
                script {
                    echo "üîç Fetching External IP from NGINX Ingress..."
                    def externalIP = ""
                    timeout(time: 10, unit: 'MINUTES') {
                        waitUntil {
                            externalIP = sh(
                                script: "kubectl get svc ingress-nginx-controller -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].hostname}{.status.loadBalancer.ingress[0].ip}'",
                                returnStdout: true
                            ).trim()
                            echo "  ‚û°Ô∏è  Current LoadBalancer external IP/hostname: ${externalIP}"
                            return externalIP != ""
                        }
                    }
                    echo "üìÑ Updating prometheus-values.yaml with External IP..."
                    sh '''
                        sed -i "s|host: '.*'|host: '${externalIP}'|" Prometheus/prometheus-values.yaml
                        sed -i "s|host: <External-IP>|host: '${externalIP}'|" k8s/ingress/stack-ingress.yaml
                    '''
                    echo "‚úÖ External IP updated."
                }
            }
        }

        stage('Deploy Unified Ingress') {
            steps {
                script {
                    echo 'üöÄ Applying unified Ingress...'
                    sh 'kubectl apply -f k8s/ingress/stack-ingress.yaml'
               }
            }
        }
    }

    post {
        success {
            echo '‚úÖ Post-deployment setup completed successfully.'
        }
        failure {
            echo '‚ùå Post-deployment setup failed. Check logs for details.'
            echo '‚ùå Cleaning up Docker images, k8 objects at all namespaces, secrets etc etc...'
            script {
                sh "sudo apt-get autoremove -y"
                sh "kubectl delete all --all --all-namespaces"
                sh "kubectl delete secrets --all --all-namespaces"
            }
        }
    }
}
