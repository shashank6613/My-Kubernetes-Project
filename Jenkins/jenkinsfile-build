pipeline {
    agent any

    environment {
        FRONTEND_IMAGE_NAME        = 'shashank9928/linkproj-fe'
        BACKEND_IMAGE_NAME         = 'shashank9928/linkproj-be'
        DOCKER_CREDENTIALS_ID       = 'dock-creds'
        GRAFANA_PASSWORD_CRED_ID    = 'grafana-admin-pass'
        FRONTEND_DEPLOYMENT_FILE   = 'k8s/manifests/frontend-deployment.yaml'
        BACKEND_DEPLOYMENT_FILE    = 'k8s/manifests/backend-deployment.yaml'
        FRONTEND_DIR               = 'frontend'
        BACKEND_DIR                = 'backend'
        CLUSTER_NAME               = 'app-clus'
        REGION                     = 'us-west-2'
    }

    stages {
        stage('Wait for EKS Cluster Readiness') {
            steps {
                script {
                    echo "üîç Checking if EKS cluster '${CLUSTER_NAME}' is ACTIVE..."
                    withAWS(credentials: 'aws-creds', region: REGION) {
                        timeout(time: 15, unit: 'MINUTES') {
                            waitUntil {
                                def status = sh(
                                    script: "aws eks describe-cluster --name ${CLUSTER_NAME} --region ${REGION} --query 'cluster.status' --output text",
                                    returnStdout: true
                                ).trim()
                                echo "EKS Cluster status: ${status}"
                                return status == 'ACTIVE'
                            }
                        }
                    }
                }
            }
        }

        stage('Update kubeconfig') {
            steps {
                script {
                    echo "üîÑ Updating kubeconfig for EKS cluster '${CLUSTER_NAME}'..."
                    withAWS(credentials: 'aws-creds', region: REGION) {
                        sh "aws eks update-kubeconfig --name ${CLUSTER_NAME} --region ${REGION} --alias ${CLUSTER_NAME}"
                        echo '‚úÖ kubeconfig updated successfully.'
                    }
                    echo 'üîç Verifying connectivity...'
                    sh "kubectl get nodes --context=${CLUSTER_NAME}"
                }
            }
        }

        stage('Checkout Source') {
            steps { checkout scm }
        }

        stage('Install Node.js and npm') {
            steps {
                script {
                    if (sh(script: 'npm -v', returnStatus: true) != 0) {
                        sh '''
                            curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -
                            sudo apt-get install -y nodejs
                        '''
                    }
                }
            }
        }

        stage('Build Frontend') {
            steps {
                dir(FRONTEND_DIR) {
                    sh 'npm install'
                    sh 'npm run build'
                }
            }
        }

        stage('Build Backend') {
            steps {
                dir(BACKEND_DIR) {
                    sh 'npm install'
                }
            }
        }

        stage('Build & Push Docker Images') {
            steps {
                script {
                    def buildId = BUILD_NUMBER
                    docker.build("${FRONTEND_IMAGE_NAME}:${buildId}", "-f ${FRONTEND_DIR}/Dockerfile ./${FRONTEND_DIR}")
                    docker.build("${BACKEND_IMAGE_NAME}:${buildId}", "-f ${BACKEND_DIR}/Dockerfile ./${BACKEND_DIR}")
                    docker.withRegistry('https://index.docker.io/v1/', DOCKER_CREDENTIALS_ID) {
                        docker.image("${FRONTEND_IMAGE_NAME}:${buildId}").push()
                        docker.image("${BACKEND_IMAGE_NAME}:${buildId}").push()
                    }
                }
            }
        }

        stage('Update Kubernetes Deployment Manifests') {
            steps {
                script {
                    def buildId = BUILD_NUMBER
                    def feImg = "${FRONTEND_IMAGE_NAME}:${buildId}"
                    def beImg = "${BACKEND_IMAGE_NAME}:${buildId}"
                    withCredentials([usernamePassword(credentialsId: 'git-creds', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASS')]) {
                        sh """
                            sed -i 's|image: .*linkproj-fe:.*|image: ${feImg}|' ${FRONTEND_DEPLOYMENT_FILE}
                            sed -i 's|image: .*linkproj-be:.*|image: ${beImg}|' ${BACKEND_DEPLOYMENT_FILE}
                            git config user.email 'jenkins@mail.com'
                            git config user.name 'Jenkins CI'
                            git add ${FRONTEND_DEPLOYMENT_FILE} ${BACKEND_DEPLOYMENT_FILE}
                            git commit -m 'Update image tags to build ${buildId}'
                            git push https://${GIT_USER}:${GIT_PASS}@github.com/shashank6613/My-Kubernetes-Project.git HEAD:master
                        """
                    }
                }
            }
        }

        stage('Install Prometheus Monitoring Stack') {
            steps {
                script {
                    echo 'üöÄ Installing Prometheus stack via Helm...'
                    sh '''
                        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
                        helm repo update
                        helm install prometheus prometheus-community/kube-prometheus-stack \
                          --namespace monitoring --create-namespace \
                          -f Prometheus/prometheus-values.yaml \
                          --set ingress.enabled=true
                    '''
                    echo '‚è≥ Waiting for Grafana pod...'
                    timeout(time: 5, unit: 'MINUTES') {
                        waitUntil {
                            sh(script: "kubectl get pods -n monitoring -l app.kubernetes.io/name=grafana --field-selector=status.phase=Running | grep grafana", returnStatus: true) == 0
                        }
                    }
                    echo '‚úÖ Grafana running.'
                }
            }
        }

        stage('Configure Grafana Admin Password') {
            steps {
                withCredentials([string(credentialsId: GRAFANA_PASSWORD_CRED_ID, variable: 'GRAFANA_PASSWORD')]) {
                    echo 'üîê Creating Grafana admin-password secret...'
                    sh "kubectl create secret generic grafana-admin-password --from-literal=admin-password='${GRAFANA_PASSWORD}' -n monitoring"
                }
            }
        }

        stage('Install Ingress Controller') {
            steps {
                script {
                    echo 'üöÄ Installing NGINX Ingress Controller...'
                    sh '''
                        helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
                        helm repo update
                        helm install ingress-nginx ingress-nginx/ingress-nginx \
                          --namespace ingress-nginx --create-namespace \
                          --set controller.service.type=LoadBalancer \
                          --set controller.publishService.enabled=true
                    '''
                    echo '‚è≥ Waiting for LoadBalancer IP...'
                    timeout(time: 5, unit: 'MINUTES') {
                        waitUntil {
                            def lb = sh(script: "kubectl get svc ingress-nginx-controller -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].hostname}{.status.loadBalancer.ingress[0].ip}'", returnStdout: true).trim()
                            echo "LoadBalancer address: ${lb}"
                            return lb != ''
                        }
                    }
                    echo '‚úÖ Ingress Controller ready.'
                }
            }
        }

        stage('Update External IP in Ingress Files') {
            steps {
                script {
                    echo "üîç Fetching External IP from NGINX Ingress..."

                    // Get the external IP
                    def externalIP = ""
                    timeout(time: 10, unit: 'MINUTES') {
                        waitUntil {
                            externalIP = sh(
                                script: """
                                    kubectl get svc ingress-nginx-controller -n ingress-nginx \
                                    -o jsonpath='{.status.loadBalancer.ingress[0].hostname}{.status.loadBalancer.ingress[0].ip}'
                                """,
                                returnStdout: true
                            ).trim()

                            echo "  ‚û°Ô∏è  Current LoadBalancer external IP/hostname: ${externalIP}"
                            return externalIP != ""
                        }
                    }

                    // Update the prometheus-values.yaml file
                    echo "üìÑ Updating prometheus-values.yaml with External IP..."
                    sh """
                        sed -i "s|host: '.*'|host: '${externalIP}'|" Prometheus/prometheus-values.yaml
                    """

                    // Update the stack-ingress.yaml file
                    echo "üìÑ Updating stack-ingress.yaml with External IP..."
                    sh """
                        sed -i "s|host: <External-IP>|host: '${externalIP}'|" k8s/ingress/stack-ingress.yaml
                    """

                    echo "‚úÖ External IP updated in both prometheus-values.yaml and stack-ingress.yaml"
                }
            }
        }

        stage('Deploy Unified Ingress') {
            steps {
                script {
                    echo 'üöÄ Applying unified Ingress...'
                    sh 'kubectl apply -f k8s/ingress/stack-ingress.yaml'
                }
            }
        }
    }

    post {
        success {
            echo '‚úÖ Pipeline completed successfully.'
        }
        failure {
            echo '‚ùå Pipeline failed. Cleaning up Docker images...'
            script {
                def id = BUILD_NUMBER
                sh "docker rmi ${FRONTEND_IMAGE_NAME}:${id} || true"
                sh "docker rmi ${BACKEND_IMAGE_NAME}:${id} || true"
            }
        }
    }
}
