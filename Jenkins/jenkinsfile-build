pipeline {
    agent any

    environment {
        FRONTEND_IMAGE_NAME = 'shashank9928/linkproj-fe'
        BACKEND_IMAGE_NAME = 'shashank9928/linkproj-be'
        DOCKER_CREDENTIALS_ID = 'dock-creds'
        FRONTEND_DEPLOYMENT_FILE = 'k8s/manifests/frontend-deployment.yaml'
        BACKEND_DEPLOYMENT_FILE = 'k8s/manifests/backend-deployment.yaml'
        FRONTEND_DIR = 'frontend'
        BACKEND_DIR = 'backend'
        CLUSTER_NAME = 'app-clus'
        REGION = 'us-west-2'
    }

    stages {
        stage('Wait for EKS Cluster Readiness') {
            steps {
                script {
                    echo "üîç Checking if EKS cluster '${CLUSTER_NAME}' is ACTIVE..."

                    withAWS(credentials: 'aws-creds', region: "${REGION}") {
                        timeout(time: 15, unit: 'MINUTES') {
                            waitUntil {
                                def status = sh(
                                     script: """
                                        aws eks describe-cluster \
                                            --name ${CLUSTER_NAME} \
                                            --region ${REGION} \
                                            --query 'cluster.status' \
                                            --output text
                                    """,
                                    returnStdout: true
                                ).trim()
                                echo "EKS Cluster status: ${status}"
                                return status == "ACTIVE"
                            }
                       }
                    }
                }
            }
        }

        stage('Checkout Source') {
            steps {
                checkout scm
            }
        }

        stage('Install Node.js and npm if Missing') {
            steps {
                script {
                    def npmInstalled = sh(script: 'npm -v', returnStatus: true) == 0
                    if (!npmInstalled) {
                        sh '''
                            curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -
                            apt install -y nodejs
                        '''
                    }
                }
            }
        }

        stage('Build Frontend') {
            steps {
                dir("${FRONTEND_DIR}") {
                    sh 'npm install'
                    sh 'npm run build'
                }
            }
        }

        stage('Build Backend') {
            steps {
                dir("${BACKEND_DIR}") {
                    sh 'npm install'
                }
            }
        }

        stage('Build & Push Docker Images') {
            steps {
                script {
                    def buildId = "${BUILD_NUMBER}"
                    docker.build("${FRONTEND_IMAGE_NAME}:${buildId}", "-f ${FRONTEND_DIR}/Dockerfile ./${FRONTEND_DIR}")
                    docker.build("${BACKEND_IMAGE_NAME}:${buildId}", "-f ${BACKEND_DIR}/Dockerfile ./${BACKEND_DIR}")

                    docker.withRegistry('https://index.docker.io/v1/', "${DOCKER_CREDENTIALS_ID}") {
                        docker.image("${FRONTEND_IMAGE_NAME}:${buildId}").push()
                        docker.image("${BACKEND_IMAGE_NAME}:${buildId}").push()
                    }
                }
            }
        }

        stage('Update Kubernetes Deployment Manifests') {
            steps {
                script {
                    def buildId = "${BUILD_NUMBER}"
                    def frontendDockerImage = "${FRONTEND_IMAGE_NAME}:${buildId}"
                    def backendDockerImage = "${BACKEND_IMAGE_NAME}:${buildId}"

                    sh """
                        sed -i "s|image: .*linkproj-fe:.*|image: ${frontendDockerImage}|" ${FRONTEND_DEPLOYMENT_FILE}
                        sed -i "s|image: .*linkproj-be:.*|image: ${backendDockerImage}|" ${BACKEND_DEPLOYMENT_FILE}

                        git config user.email "jenkins@yourdomain.com"
                        git config user.name "Jenkins CI"
                        git add ${FRONTEND_DEPLOYMENT_FILE} ${BACKEND_DEPLOYMENT_FILE}
                        git commit -m "Update image tags to build ${buildId}"
                        git push origin HEAD:master
                    """
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ EKS cluster exists and manifests updated in Git. ArgoCD will handle deployment."
        }
        failure {
            echo "‚ùå Pipeline failed. Cleaning up Docker images..."
            script {
                def buildId = "${BUILD_NUMBER}"
                sh """
                    docker rmi ${FRONTEND_IMAGE_NAME}:${buildId} || true
                    docker rmi ${BACKEND_IMAGE_NAME}:${buildId} || true
                """
            }
        }
    }
}
