pipeline {
    agent any

    environment {
        AWS_CREDENTIALS_ID = 'aws-creds'
        CLUSTER_NAME = 'app-clus'
        REGION = 'us-west-2'
    }

    stages {
        stage('Check for Existing EKS Cluster') {
            steps {
                script {
                    echo "üîç Checking if EKS cluster '${CLUSTER_NAME}' already exists..."
                    withAWS(credentials: "${AWS_CREDENTIALS_ID}", region: "${REGION}") {
                        def clusterStatus = sh(
                            script: """
                                aws eks describe-cluster \
                                    --name ${CLUSTER_NAME} \
                                    --region ${REGION} \
                                    --query 'cluster.status' \
                                    --output text || echo "NOTFOUND"
                            """,
                            returnStdout: true
                        ).trim()

                        if (clusterStatus == "ACTIVE" || clusterStatus == "CREATING") {
                            echo "‚úÖ Cluster '${CLUSTER_NAME}' already exists with status: ${clusterStatus}"
                            currentBuild.result = 'SUCCESS'
                            return
                        } else {
                            echo "üöÄ Cluster not found. Proceeding to creation..."
                        }
                    }
                }
            }
        }

        stage('Create EKS Cluster') {
            when {
                expression {
                    currentBuild.result != 'SUCCESS'
                }
            }
            steps {
                script {
                    withAWS(credentials: "${AWS_CREDENTIALS_ID}", region: "${REGION}") {
                        echo "üöÄ Creating new EKS cluster..."
                        sh """
                            set -e
                            eksctl create cluster \
                                --name ${CLUSTER_NAME} \
                                --version 1.32 \
                                --region ${REGION} \
                                --nodegroup-name stand-work \
                                --node-type t3.medium \
                                --nodes 2 \
                                --nodes-min 2 \
                                --nodes-max 3 \
                                --managed
                        """
                    }
                }
            }
        }

        stage('Update kubeconfig') {
            steps {
                script {
                    echo "üîÑ Updating kubeconfig for EKS cluster '${CLUSTER_NAME}'..."
                    withAWS(credentials: "${AWS_CREDENTIALS_ID}", region: ${REGION}) {
                        sh """
                            aws eks update-kubeconfig \\
                            --name ${CLUSTER_NAME} \\
                            --region ${REGION} \\
                            --alias ${CLUSTER_NAME}
                        """
                        echo '‚úÖ kubeconfig updated successfully.'
                    }
                }
            }
        }

        stage('Wait for Node Readiness') {
            steps {
                script {
                    echo "‚è≥ Waiting for EKS nodes to become ready..."
                    timeout(time: 10, unit: 'MINUTES') {
                        waitUntil {
                            def readyNodes = sh(
                                script: "kubectl get nodes --no-headers | grep 'Ready' | wc -l",
                                returnStdout: true
                            ).trim().toInteger()
                            echo "Nodes Ready: ${readyNodes}"
                            return readyNodes > 0
                        }
                    }
                    echo "‚úÖ EKS nodes are ready."
                }
            }
        }

        stage('Install ArgoCD') {
            steps {
                script {
                    echo "üöÄ Installing ArgoCD using Helm..."
                    sh """
                        kubectl create namespace argocd || true
                        helm repo add argo https://argoproj.github.io/argo-helm
                        helm repo update
                        helm install argocd argo/argo-cd \
                            --namespace argocd \
                            --set server.service.type=ClusterIP \
                            --set installCRDs=true
                    """
                }
            }
        }

        stage('Apply ArgoCD Application File') {
            steps {
                script {
                    echo "üöÄ Applying ArgoCD Application manifest..."
                    sh """
                        kubectl apply -f ArgoCD-config/argo-app.yaml -n argocd
                    """
                }
            }
        }

        stage('Create Kubernetes DB Secret') {
            steps {
                withCredentials([file(credentialsId: 'db-secrets-file', variable: 'DB_SECRETS_FILE')]) {
                    script {
                        echo "üîê Creating Kubernetes secret for database credentials..."
                        sh """
                            kubectl create secret generic db-credentials \
                              --from-env-file=${DB_SECRETS_FILE} \
                              -n default
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo '‚úÖ EKS cluster creation, ArgoCD installation, and application deployment completed (or already existed).'
        }
        failure {
            echo '‚ùå EKS cluster creation or ArgoCD installation job failed.'
        }
    }
}
